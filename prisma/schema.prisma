// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                    String    @id @default(cuid())
    name                  String?
    email                 String?   @unique
    isAdmin               Boolean   @default(false)
    isVerified            Boolean   @default(false)
    emailVerified         DateTime?
    image                 String?
    phone                 String?
    verificationRequested Boolean   @default(false)
    location              String    @default("nsc")
    accounts              Account[]
    sessions              Session[]
    Image                 Image[]
    Event                 Event[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Image {
    id          String  @id @default(cuid())
    key         String  @db.Text
    name        String
    url         String  @db.Text
    type        String?
    createdBy   User    @relation(fields: [createdById], references: [id])
    createdById String
    event       Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId     String?

    @@index([eventId, name])
    @@index([eventId])
    @@index([createdById])
}

model Event {
    id          String   @id @default(cuid())
    title       String
    eventDate   DateTime
    image       Image[]
    description String
    location    String
    link        String?
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([createdById])
}

model Location {
    id    Int    @id @default(autoincrement())
    code  String
    label String
}
